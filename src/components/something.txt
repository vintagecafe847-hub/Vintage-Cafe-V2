import { useEffect, useRef, useState } from 'react';

const AboutStory = () => {
  // Ref for the main container to get its position and dimensions
  const containerRef = useRef<HTMLDivElement>(null);
  // Ref for the horizontal slider to calculate its total scrollable width
  const sliderRef = useRef<HTMLDivElement>(null);

  // State to hold the dynamic transform value for smooth scrolling
  const [translateX, setTranslateX] = useState(0);
  // State to track the currently "active" slide for UI feedback (dots, text)
  const [activeIndex, setActiveIndex] = useState(0);

  const storyItems = [
    {
      id: 1,
      title: 'Our Cozy Atmosphere',
      description:
        'Step into our warm and inviting space where every corner tells a story. Our vintage decor and comfortable seating create the perfect ambiance for catching up with friends, reading a book, or working on your laptop.',
      image: 'https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg',
      alt: 'Cozy cafe interior',
      color: 'from-amber-400/20 to-orange-400/20',
      slug: 'atmosphere',
      filterName: 'Cozy Atmosphere',
    },
    {
      id: 2,
      title: 'Artisan Coffee Craftsmanship',
      description:
        'Our skilled baristas take pride in every cup they create. Using premium beans sourced from sustainable farms around the world, we craft each drink with precision and passion.',
      image: 'https://images.pexels.com/photos/312418/pexels-photo-312418.jpeg',
      alt: 'Coffee preparation',
      color: 'from-orange-400/20 to-red-400/20',
      slug: 'craftsmanship',
      filterName: 'Coffee Craftsmanship',
    },
    {
      id: 3,
      title: 'Community Gathering Place',
      description:
        "More than just a cafe, we're a place where friendships bloom and connections are made. Our weekly events bring together people from all walks of life in our beloved community.",
      image:
        'https://images.pexels.com/photos/6347707/pexels-photo-6347707.jpeg',
      alt: 'People enjoying coffee together',
      color: 'from-red-400/20 to-pink-400/20',
      slug: 'community',
      filterName: 'Community Hub',
    },
  ];

  // Filter component similar to the international services
  const StoryFilter = ({ items, activeIndex }) => {
    const scrollToSection = (targetIndex) => {
      if (!containerRef.current) return;

      const container = containerRef.current;
      const containerTop = container.offsetTop;
      const containerHeight = container.offsetHeight;
      const viewportHeight = window.innerHeight;
      const scrollableDistance = containerHeight - viewportHeight;

      // Calculate the scroll position for the target index
      const progress = targetIndex / (items.length - 1);
      const targetScrollY = containerTop + progress * scrollableDistance;

      window.scrollTo({
        top: targetScrollY,
        behavior: 'smooth',
      });
    };

    return (
      <div className="flex items-center justify-center">
        <div className="relative">
          <div
            className="flex gap-1 rounded-full border-[0.7px] border-[rgba(120,113,108,0.12)] bg-[rgba(251,251,248,0.9)] backdrop-blur-sm px-3 py-3 overflow-x-auto w-fit max-w-[calc(100vw-2rem)]"
            style={{
              scrollbarWidth: 'thin',
              scrollbarColor: '#e5e5e5 transparent',
            }}
          >
            {items.map((item, index) => (
              <button
                key={item.slug}
                onClick={() => scrollToSection(index)}
                className={`
                  flex-shrink-0 whitespace-nowrap rounded-full px-6 py-4 text-base font-semibold 
                  text-[rgba(21,13,48,0.85)] transition-colors duration-200 leading-[21px]
                  ${
                    activeIndex === index
                      ? 'border-[0.7px] border-[rgba(120,113,108,0.12)] bg-[rgba(240,229,219,0.8)]'
                      : 'border-none'
                  }
                `}
              >
                {item.filterName}
              </button>
            ))}
          </div>
        </div>
      </div>
    );
  };

  useEffect(() => {
    const handleScroll = () => {
      if (!containerRef.current || !sliderRef.current) return;

      const container = containerRef.current;
      const slider = sliderRef.current;

      // Calculate the boundaries of the scroll effect
      const containerTop = container.offsetTop;
      const containerHeight = container.offsetHeight;
      const viewportHeight = window.innerHeight;

      // The total vertical distance the user will scroll while the effect is active
      const scrollableDistance = containerHeight - viewportHeight;

      if (scrollableDistance <= 0) {
        // If the container is shorter than the viewport, the effect can't run.
        return;
      }

      // Current scroll position
      const scrollY = window.scrollY;

      // Calculate progress (0 to 1) of the scroll within the container's active area
      const scrollProgress = Math.max(
        0,
        Math.min(1, (scrollY - containerTop) / scrollableDistance)
      );

      // The total width the slider needs to move
      // This is the full width of all items minus one screen width
      const totalHorizontalScroll = slider.scrollWidth - window.innerWidth;

      // Calculate the new translateX value
      const newTranslateX = -scrollProgress * totalHorizontalScroll;
      setTranslateX(newTranslateX);

      // Calculate the active index for the UI dots/text
      const newActiveIndex = Math.round(
        scrollProgress * (storyItems.length - 1)
      );
      setActiveIndex(newActiveIndex);
    };

    // Attach the event listener
    window.addEventListener('scroll', handleScroll);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [storyItems.length]);

  return (
    <>
      {/* The outer section creates the "runway" for the scroll effect.
        Its height determines how long the user scrolls vertically to move the horizontal content.
        Using a vh unit (like 300vh) is generally more robust than vw for height.
        I've used 300vh here as a safe default, but you can change it back to '80vw'
        if you're confident it will work for your target screen sizes. See note at the bottom.
      */}
      <section
        ref={containerRef}
        className="relative bg-gradient-to-br from-amber-50 via-orange-50 to-red-50"
        style={{ height: '300vh' /* Or '80vw' as requested */ }}
      >
        {/* Enhanced floating background elements */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          {/* Main glow circles - made more visible */}
          <div className="absolute rounded-full w-80 h-80 bg-gradient-to-r from-amber-400/40 to-orange-400/40 blur-3xl top-1/4 right-1/4 animate-pulse"></div>
          <div
            className="absolute w-64 h-64 rounded-full bg-gradient-to-r from-red-400/35 to-pink-400/35 blur-3xl bottom-1/4 left-1/4 animate-pulse"
            style={{ animationDelay: '3s' }}
          ></div>

          {/* Additional glow circles for depth */}
          <div
            className="absolute w-96 h-96 rounded-full bg-gradient-to-r from-orange-300/30 to-red-300/30 blur-[4rem] top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 animate-pulse"
            style={{ animationDelay: '1.5s' }}
          ></div>
          <div className="absolute w-48 h-48 rounded-full bg-gradient-to-r from-amber-500/25 to-yellow-400/25 blur-2xl top-3/4 right-1/3 animate-pulse"></div>

          {/* Striped circles */}
          <div
            className="absolute w-32 h-32 rounded-full top-1/3 left-12 opacity-20 animate-pulse"
            style={{
              background:
                'conic-gradient(from 0deg, transparent 0deg, #f59e0b 45deg, transparent 90deg, #f59e0b 135deg, transparent 180deg, #f59e0b 225deg, transparent 270deg, #f59e0b 315deg, transparent 360deg)',
              animationDelay: '2s',
            }}
          ></div>
          <div
            className="absolute w-24 h-24 rounded-full bottom-1/4 right-16 opacity-15 animate-pulse"
            style={{
              background:
                'conic-gradient(from 45deg, transparent 0deg, #dc2626 30deg, transparent 60deg, #dc2626 90deg, transparent 120deg, #dc2626 150deg, transparent 180deg, #dc2626 210deg, transparent 240deg, #dc2626 270deg, transparent 300deg, #dc2626 330deg, transparent 360deg)',
              animationDelay: '4s',
            }}
          ></div>
          <div
            className="absolute w-20 h-20 rounded-full opacity-25 top-2/3 left-1/4 animate-pulse"
            style={{
              background:
                'repeating-conic-gradient(from 0deg, #f97316 0deg 20deg, transparent 20deg 40deg)',
              animationDelay: '6s',
            }}
          ></div>

          {/* Organic abstract border shapes */}
          <svg
            className="absolute w-40 h-40 top-16 left-8 opacity-15 animate-pulse"
            viewBox="0 0 200 200"
          >
            <path
              d="M50,100 C50,50 100,20 150,50 C180,80 160,120 130,140 C100,160 70,140 50,100 Z"
              fill="url(#organicGradient1)"
              stroke="#f59e0b"
              strokeWidth="2"
              strokeDasharray="8,4"
            />
            <defs>
              <linearGradient
                id="organicGradient1"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="#fbbf24" stopOpacity="0.3" />
                <stop offset="100%" stopColor="#f59e0b" stopOpacity="0.1" />
              </linearGradient>
            </defs>
          </svg>

          <svg
            className="absolute bottom-20 right-12 w-36 h-36 opacity-20 animate-pulse"
            viewBox="0 0 200 200"
            style={{ animationDelay: '3s' }}
          >
            <path
              d="M40,80 C60,40 120,30 160,70 C190,100 170,150 130,170 C90,180 50,140 40,80 Z"
              fill="url(#organicGradient2)"
              stroke="#dc2626"
              strokeWidth="3"
              strokeDasharray="12,6"
            />
            <defs>
              <linearGradient
                id="organicGradient2"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="#ef4444" stopOpacity="0.25" />
                <stop offset="100%" stopColor="#dc2626" stopOpacity="0.1" />
              </linearGradient>
            </defs>
          </svg>

          <svg
            className="absolute top-1/2 right-4 w-28 h-28 opacity-18 animate-pulse"
            viewBox="0 0 200 200"
            style={{ animationDelay: '5s' }}
          >
            <path
              d="M60,60 C100,20 140,40 170,80 C180,120 150,160 110,170 C70,160 40,120 60,60 Z"
              fill="url(#organicGradient3)"
              stroke="#f97316"
              strokeWidth="2"
              strokeDasharray="6,3"
            />
            <defs>
              <linearGradient
                id="organicGradient3"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="#fb923c" stopOpacity="0.2" />
                <stop offset="100%" stopColor="#f97316" stopOpacity="0.1" />
              </linearGradient>
            </defs>
          </svg>

          <svg
            className="absolute w-32 h-32 bottom-1/3 left-6 opacity-16 animate-pulse"
            viewBox="0 0 200 200"
            style={{ animationDelay: '7s' }}
          >
            <path
              d="M80,50 C120,30 160,60 180,100 C170,140 130,170 90,160 C50,140 40,90 80,50 Z"
              fill="url(#organicGradient4)"
              stroke="#ec4899"
              strokeWidth="2"
              strokeDasharray="10,5"
            />
            <defs>
              <linearGradient
                id="organicGradient4"
                x1="0%"
                y1="0%"
                x2="100%"
                y2="100%"
              >
                <stop offset="0%" stopColor="#f472b6" stopOpacity="0.2" />
                <stop offset="100%" stopColor="#ec4899" stopOpacity="0.1" />
              </linearGradient>
            </defs>
          </svg>

          {/* Additional striped circles in corners */}
          <div
            className="absolute w-16 h-16 rounded-full top-20 right-20 opacity-12 animate-pulse"
            style={{
              background:
                'repeating-conic-gradient(from 30deg, #f59e0b 0deg 15deg, transparent 15deg 30deg)',
              animationDelay: '8s',
            }}
          ></div>
          <div
            className="absolute w-20 h-20 rounded-full bottom-32 left-20 opacity-18 animate-pulse"
            style={{
              background:
                'repeating-conic-gradient(from 60deg, #dc2626 0deg 12deg, transparent 12deg 24deg)',
              animationDelay: '10s',
            }}
          ></div>
        </div>

        {/* Sticky container that holds the horizontal content */}
        <div className="sticky top-0 h-screen overflow-hidden">
          {/* Horizontal slider */}
          <div
            ref={sliderRef}
            className="relative flex h-full" // Removed transition classes
            style={{
              width: `${storyItems.length * 100}vw`,
              // The transform is now controlled by the scroll event in JS
              transform: `translateX(${translateX}px)`,
            }}
          >
            {storyItems.map((item, index) => (
              <div
                key={item.id}
                className="flex items-center justify-center h-screen px-4"
                style={{ width: '100vw' }}
              >
                <div
                  className="grid items-center gap-8 lg:gap-16 lg:grid-cols-2"
                  style={{ width: '80vw' }}
                >
                  {index % 2 === 0 ? (
                    <>
                      {/* Text on left */}
                      <div className="relative space-y-6">
                        <h2
                          className="relative z-10 text-4xl font-bold leading-tight md:text-6xl lg:text-7xl text-amber-900"
                          style={{ fontFamily: 'serif' }}
                        >
                          {item.title}
                        </h2>
                        <p className="relative z-10 max-w-lg text-base leading-relaxed text-gray-600 md:text-lg lg:text-xl">
                          {item.description}
                        </p>
                      </div>
                      {/* Image on right */}
                      <div className="relative flex items-center justify-center">
                        <span
                          className={`absolute -z-10 w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96 bg-gradient-to-br ${item.color} rounded-full blur-2xl opacity-70`}
                        ></span>
                        <img
                          src={item.image}
                          alt={item.alt}
                          className="relative z-10 object-cover w-56 h-56 border-4 border-white shadow-2xl rounded-3xl md:w-72 md:h-72 lg:w-80 lg:h-80 md:border-8"
                          draggable={false}
                        />
                      </div>
                    </>
                  ) : (
                    <>
                      {/* Image on left */}
                      <div className="relative flex items-center justify-center lg:order-first">
                        <span
                          className={`absolute -z-10 w-64 h-64 md:w-80 md:h-80 lg:w-96 lg:h-96 bg-gradient-to-br ${item.color} rounded-full blur-2xl opacity-70`}
                        ></span>
                        <img
                          src={item.image}
                          alt={item.alt}
                          className="relative z-10 object-cover w-56 h-56 border-4 border-white shadow-2xl rounded-3xl md:w-72 md:h-72 lg:w-80 lg:h-80 md:border-8"
                          draggable={false}
                        />
                      </div>
                      {/* Text on right */}
                      <div className="relative space-y-6">
                        <h2
                          className="relative z-10 text-4xl font-bold leading-tight md:text-6xl lg:text-7xl text-amber-900"
                          style={{ fontFamily: 'serif' }}
                        >
                          {item.title}
                        </h2>
                        <p className="relative z-10 max-w-lg text-base leading-relaxed text-gray-600 md:text-lg lg:text-xl">
                          {item.description}
                        </p>
                      </div>
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Fixed UI elements now use `activeIndex` */}
          <div className="absolute inset-0 pointer-events-none">
            {/* Filter component positioned at the top center */}
            <div className="absolute transform -translate-x-1/2 pointer-events-auto top-28 left-1/2">
              <StoryFilter items={storyItems} activeIndex={activeIndex} />
            </div>

            {/* Progress indicator */}
            <div className="absolute transform -translate-x-1/2 bottom-8 left-1/2">
              <div className="flex space-x-3">
                {storyItems.map((_, index) => (
                  <div
                    key={index}
                    className={`w-3 h-3 rounded-full transition-all duration-500 ${
                      index === activeIndex
                        ? 'bg-amber-600 scale-125 shadow-lg'
                        : 'bg-amber-300/50'
                    }`}
                  ></div>
                ))}
              </div>
            </div>

            {/* Removed the scroll indicator from top-right as requested */}
          </div>
        </div>
      </section>
    </>
  );
};

export default AboutStory;
