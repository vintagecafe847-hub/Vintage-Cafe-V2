{"views":[],"tables":[{"name":"attributes","owner":"postgres","schema":"public"},{"name":"categories","owner":"postgres","schema":"public"},{"name":"menu_item_attributes","owner":"postgres","schema":"public"},{"name":"menu_item_sizes","owner":"postgres","schema":"public"},{"name":"menu_items","owner":"postgres","schema":"public"},{"name":"sizes","owner":"postgres","schema":"public"},{"name":"buckets","owner":"supabase_storage_admin","schema":"storage"},{"name":"buckets_analytics","owner":"supabase_storage_admin","schema":"storage"},{"name":"migrations","owner":"supabase_storage_admin","schema":"storage"},{"name":"objects","owner":"supabase_storage_admin","schema":"storage"},{"name":"prefixes","owner":"supabase_storage_admin","schema":"storage"},{"name":"s3_multipart_uploads","owner":"supabase_storage_admin","schema":"storage"},{"name":"s3_multipart_uploads_parts","owner":"supabase_storage_admin","schema":"storage"}],"columns":[{"name":"id","table":"attributes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"name","table":"attributes","schema":"public","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"description","table":"attributes","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":3},{"name":"color","table":"attributes","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":4},{"name":"is_active","table":"attributes","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":5},{"name":"display_order","table":"attributes","schema":"public","data_type":"integer","is_nullable":"YES","column_default":"0","ordinal_position":6},{"name":"created_at","table":"attributes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":7},{"name":"updated_at","table":"attributes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":8},{"name":"id","table":"categories","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"name","table":"categories","schema":"public","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"description","table":"categories","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":3},{"name":"display_order","table":"categories","schema":"public","data_type":"integer","is_nullable":"YES","column_default":"0","ordinal_position":4},{"name":"is_active","table":"categories","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":5},{"name":"created_at","table":"categories","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":6},{"name":"updated_at","table":"categories","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":7},{"name":"id","table":"menu_item_attributes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"menu_item_id","table":"menu_item_attributes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"attribute_id","table":"menu_item_attributes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"is_active","table":"menu_item_attributes","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":4},{"name":"created_at","table":"menu_item_attributes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":5},{"name":"updated_at","table":"menu_item_attributes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":6},{"name":"id","table":"menu_item_sizes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"menu_item_id","table":"menu_item_sizes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"size_id","table":"menu_item_sizes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"price_override","table":"menu_item_sizes","schema":"public","data_type":"numeric","is_nullable":"YES","column_default":null,"ordinal_position":4},{"name":"is_active","table":"menu_item_sizes","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":5},{"name":"created_at","table":"menu_item_sizes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":6},{"name":"updated_at","table":"menu_item_sizes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":7},{"name":"id","table":"menu_items","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"category_id","table":"menu_items","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"name","table":"menu_items","schema":"public","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"description","table":"menu_items","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":4},{"name":"price","table":"menu_items","schema":"public","data_type":"numeric","is_nullable":"NO","column_default":"0","ordinal_position":5},{"name":"sizes","table":"menu_items","schema":"public","data_type":"jsonb","is_nullable":"YES","column_default":null,"ordinal_position":6},{"name":"image_url","table":"menu_items","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":7},{"name":"tags","table":"menu_items","schema":"public","data_type":"ARRAY","is_nullable":"YES","column_default":null,"ordinal_position":8},{"name":"is_active","table":"menu_items","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":9},{"name":"display_order","table":"menu_items","schema":"public","data_type":"integer","is_nullable":"YES","column_default":"0","ordinal_position":10},{"name":"created_at","table":"menu_items","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":11},{"name":"updated_at","table":"menu_items","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":12},{"name":"id","table":"sizes","schema":"public","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"name","table":"sizes","schema":"public","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"description","table":"sizes","schema":"public","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":3},{"name":"price_adjustment","table":"sizes","schema":"public","data_type":"numeric","is_nullable":"YES","column_default":"0","ordinal_position":4},{"name":"is_active","table":"sizes","schema":"public","data_type":"boolean","is_nullable":"NO","column_default":"true","ordinal_position":5},{"name":"display_order","table":"sizes","schema":"public","data_type":"integer","is_nullable":"YES","column_default":"0","ordinal_position":6},{"name":"created_at","table":"sizes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":7},{"name":"updated_at","table":"sizes","schema":"public","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":8},{"name":"id","table":"buckets","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":1},{"name":"name","table":"buckets","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"owner","table":"buckets","schema":"storage","data_type":"uuid","is_nullable":"YES","column_default":null,"ordinal_position":3},{"name":"created_at","table":"buckets","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":4},{"name":"updated_at","table":"buckets","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":5},{"name":"public","table":"buckets","schema":"storage","data_type":"boolean","is_nullable":"YES","column_default":"false","ordinal_position":6},{"name":"avif_autodetection","table":"buckets","schema":"storage","data_type":"boolean","is_nullable":"YES","column_default":"false","ordinal_position":7},{"name":"file_size_limit","table":"buckets","schema":"storage","data_type":"bigint","is_nullable":"YES","column_default":null,"ordinal_position":8},{"name":"allowed_mime_types","table":"buckets","schema":"storage","data_type":"ARRAY","is_nullable":"YES","column_default":null,"ordinal_position":9},{"name":"owner_id","table":"buckets","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":10},{"name":"type","table":"buckets","schema":"storage","data_type":"USER-DEFINED","is_nullable":"NO","column_default":"'STANDARD'::storage.buckettype","ordinal_position":11},{"name":"id","table":"buckets_analytics","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":1},{"name":"type","table":"buckets_analytics","schema":"storage","data_type":"USER-DEFINED","is_nullable":"NO","column_default":"'ANALYTICS'::storage.buckettype","ordinal_position":2},{"name":"format","table":"buckets_analytics","schema":"storage","data_type":"text","is_nullable":"NO","column_default":"'ICEBERG'::text","ordinal_position":3},{"name":"created_at","table":"buckets_analytics","schema":"storage","data_type":"timestamp with time zone","is_nullable":"NO","column_default":"now()","ordinal_position":4},{"name":"updated_at","table":"buckets_analytics","schema":"storage","data_type":"timestamp with time zone","is_nullable":"NO","column_default":"now()","ordinal_position":5},{"name":"id","table":"migrations","schema":"storage","data_type":"integer","is_nullable":"NO","column_default":null,"ordinal_position":1},{"name":"name","table":"migrations","schema":"storage","data_type":"character varying","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"hash","table":"migrations","schema":"storage","data_type":"character varying","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"executed_at","table":"migrations","schema":"storage","data_type":"timestamp without time zone","is_nullable":"YES","column_default":"CURRENT_TIMESTAMP","ordinal_position":4},{"name":"id","table":"objects","schema":"storage","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"bucket_id","table":"objects","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":2},{"name":"name","table":"objects","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":3},{"name":"owner","table":"objects","schema":"storage","data_type":"uuid","is_nullable":"YES","column_default":null,"ordinal_position":4},{"name":"created_at","table":"objects","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":5},{"name":"updated_at","table":"objects","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":6},{"name":"last_accessed_at","table":"objects","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":7},{"name":"metadata","table":"objects","schema":"storage","data_type":"jsonb","is_nullable":"YES","column_default":null,"ordinal_position":8},{"name":"path_tokens","table":"objects","schema":"storage","data_type":"ARRAY","is_nullable":"YES","column_default":null,"ordinal_position":9},{"name":"version","table":"objects","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":10},{"name":"owner_id","table":"objects","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":11},{"name":"user_metadata","table":"objects","schema":"storage","data_type":"jsonb","is_nullable":"YES","column_default":null,"ordinal_position":12},{"name":"level","table":"objects","schema":"storage","data_type":"integer","is_nullable":"YES","column_default":null,"ordinal_position":13},{"name":"bucket_id","table":"prefixes","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":1},{"name":"name","table":"prefixes","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"level","table":"prefixes","schema":"storage","data_type":"integer","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"created_at","table":"prefixes","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":4},{"name":"updated_at","table":"prefixes","schema":"storage","data_type":"timestamp with time zone","is_nullable":"YES","column_default":"now()","ordinal_position":5},{"name":"id","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":1},{"name":"in_progress_size","table":"s3_multipart_uploads","schema":"storage","data_type":"bigint","is_nullable":"NO","column_default":"0","ordinal_position":2},{"name":"upload_signature","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":3},{"name":"bucket_id","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":4},{"name":"key","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":5},{"name":"version","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":6},{"name":"owner_id","table":"s3_multipart_uploads","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":7},{"name":"created_at","table":"s3_multipart_uploads","schema":"storage","data_type":"timestamp with time zone","is_nullable":"NO","column_default":"now()","ordinal_position":8},{"name":"user_metadata","table":"s3_multipart_uploads","schema":"storage","data_type":"jsonb","is_nullable":"YES","column_default":null,"ordinal_position":9},{"name":"id","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"uuid","is_nullable":"NO","column_default":"gen_random_uuid()","ordinal_position":1},{"name":"upload_id","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":2},{"name":"size","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"bigint","is_nullable":"NO","column_default":"0","ordinal_position":3},{"name":"part_number","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"integer","is_nullable":"NO","column_default":null,"ordinal_position":4},{"name":"bucket_id","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":5},{"name":"key","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":6},{"name":"etag","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":7},{"name":"owner_id","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"YES","column_default":null,"ordinal_position":8},{"name":"version","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"text","is_nullable":"NO","column_default":null,"ordinal_position":9},{"name":"created_at","table":"s3_multipart_uploads_parts","schema":"storage","data_type":"timestamp with time zone","is_nullable":"NO","column_default":"now()","ordinal_position":10}],"indexes":[{"name":"attributes_pkey","table":"attributes","schema":"public","indexdef":"CREATE UNIQUE INDEX attributes_pkey ON public.attributes USING btree (id)"},{"name":"idx_attributes_active_order","table":"attributes","schema":"public","indexdef":"CREATE INDEX idx_attributes_active_order ON public.attributes USING btree (is_active, display_order, name)"},{"name":"categories_pkey","table":"categories","schema":"public","indexdef":"CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id)"},{"name":"idx_categories_active_order","table":"categories","schema":"public","indexdef":"CREATE INDEX idx_categories_active_order ON public.categories USING btree (is_active, display_order, name)"},{"name":"idx_menu_item_attributes_attribute","table":"menu_item_attributes","schema":"public","indexdef":"CREATE INDEX idx_menu_item_attributes_attribute ON public.menu_item_attributes USING btree (attribute_id, is_active)"},{"name":"idx_menu_item_attributes_menu_item","table":"menu_item_attributes","schema":"public","indexdef":"CREATE INDEX idx_menu_item_attributes_menu_item ON public.menu_item_attributes USING btree (menu_item_id, is_active)"},{"name":"menu_item_attributes_menu_item_id_attribute_id_key","table":"menu_item_attributes","schema":"public","indexdef":"CREATE UNIQUE INDEX menu_item_attributes_menu_item_id_attribute_id_key ON public.menu_item_attributes USING btree (menu_item_id, attribute_id)"},{"name":"menu_item_attributes_pkey","table":"menu_item_attributes","schema":"public","indexdef":"CREATE UNIQUE INDEX menu_item_attributes_pkey ON public.menu_item_attributes USING btree (id)"},{"name":"idx_menu_item_sizes_menu_item","table":"menu_item_sizes","schema":"public","indexdef":"CREATE INDEX idx_menu_item_sizes_menu_item ON public.menu_item_sizes USING btree (menu_item_id, is_active)"},{"name":"idx_menu_item_sizes_size","table":"menu_item_sizes","schema":"public","indexdef":"CREATE INDEX idx_menu_item_sizes_size ON public.menu_item_sizes USING btree (size_id, is_active)"},{"name":"menu_item_sizes_menu_item_id_size_id_key","table":"menu_item_sizes","schema":"public","indexdef":"CREATE UNIQUE INDEX menu_item_sizes_menu_item_id_size_id_key ON public.menu_item_sizes USING btree (menu_item_id, size_id)"},{"name":"menu_item_sizes_pkey","table":"menu_item_sizes","schema":"public","indexdef":"CREATE UNIQUE INDEX menu_item_sizes_pkey ON public.menu_item_sizes USING btree (id)"},{"name":"idx_menu_items_category","table":"menu_items","schema":"public","indexdef":"CREATE INDEX idx_menu_items_category ON public.menu_items USING btree (category_id, is_active, display_order, name)"},{"name":"menu_items_pkey","table":"menu_items","schema":"public","indexdef":"CREATE UNIQUE INDEX menu_items_pkey ON public.menu_items USING btree (id)"},{"name":"idx_sizes_active_order","table":"sizes","schema":"public","indexdef":"CREATE INDEX idx_sizes_active_order ON public.sizes USING btree (is_active, display_order, name)"},{"name":"sizes_pkey","table":"sizes","schema":"public","indexdef":"CREATE UNIQUE INDEX sizes_pkey ON public.sizes USING btree (id)"},{"name":"bname","table":"buckets","schema":"storage","indexdef":"CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name)"},{"name":"buckets_pkey","table":"buckets","schema":"storage","indexdef":"CREATE UNIQUE INDEX buckets_pkey ON storage.buckets USING btree (id)"},{"name":"buckets_analytics_pkey","table":"buckets_analytics","schema":"storage","indexdef":"CREATE UNIQUE INDEX buckets_analytics_pkey ON storage.buckets_analytics USING btree (id)"},{"name":"migrations_name_key","table":"migrations","schema":"storage","indexdef":"CREATE UNIQUE INDEX migrations_name_key ON storage.migrations USING btree (name)"},{"name":"migrations_pkey","table":"migrations","schema":"storage","indexdef":"CREATE UNIQUE INDEX migrations_pkey ON storage.migrations USING btree (id)"},{"name":"bucketid_objname","table":"objects","schema":"storage","indexdef":"CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name)"},{"name":"idx_name_bucket_level_unique","table":"objects","schema":"storage","indexdef":"CREATE UNIQUE INDEX idx_name_bucket_level_unique ON storage.objects USING btree (name COLLATE \"C\", bucket_id, level)"},{"name":"idx_objects_bucket_id_name","table":"objects","schema":"storage","indexdef":"CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE \"C\")"},{"name":"idx_objects_lower_name","table":"objects","schema":"storage","indexdef":"CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level)"},{"name":"name_prefix_search","table":"objects","schema":"storage","indexdef":"CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops)"},{"name":"objects_bucket_id_level_idx","table":"objects","schema":"storage","indexdef":"CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE \"C\")"},{"name":"objects_pkey","table":"objects","schema":"storage","indexdef":"CREATE UNIQUE INDEX objects_pkey ON storage.objects USING btree (id)"},{"name":"idx_prefixes_lower_name","table":"prefixes","schema":"storage","indexdef":"CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops)"},{"name":"prefixes_pkey","table":"prefixes","schema":"storage","indexdef":"CREATE UNIQUE INDEX prefixes_pkey ON storage.prefixes USING btree (bucket_id, level, name)"},{"name":"idx_multipart_uploads_list","table":"s3_multipart_uploads","schema":"storage","indexdef":"CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at)"},{"name":"s3_multipart_uploads_pkey","table":"s3_multipart_uploads","schema":"storage","indexdef":"CREATE UNIQUE INDEX s3_multipart_uploads_pkey ON storage.s3_multipart_uploads USING btree (id)"},{"name":"s3_multipart_uploads_parts_pkey","table":"s3_multipart_uploads_parts","schema":"storage","indexdef":"CREATE UNIQUE INDEX s3_multipart_uploads_parts_pkey ON storage.s3_multipart_uploads_parts USING btree (id)"}],"schemas":["public","storage"],"policies":[{"name":"admin_write_attributes","roles":"authenticated","table":"attributes","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_attributes","roles":"anon, authenticated","table":"attributes","schema":"public","applies_to":"s","using_expression":"(is_active = true)","with_check_expression":null},{"name":"admin_write_categories","roles":"authenticated","table":"categories","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_categories","roles":"anon, authenticated","table":"categories","schema":"public","applies_to":"s","using_expression":"(is_active = true)","with_check_expression":null},{"name":"admin_write_menu_item_attributes","roles":"authenticated","table":"menu_item_attributes","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_menu_item_attributes","roles":"anon, authenticated","table":"menu_item_attributes","schema":"public","applies_to":"s","using_expression":"((is_active = true) AND (EXISTS ( SELECT 1\n   FROM menu_items mi\n  WHERE ((mi.id = menu_item_attributes.menu_item_id) AND (mi.is_active = true)))) AND (EXISTS ( SELECT 1\n   FROM attributes a\n  WHERE ((a.id = menu_item_attributes.attribute_id) AND (a.is_active = true)))))","with_check_expression":null},{"name":"admin_write_menu_item_sizes","roles":"authenticated","table":"menu_item_sizes","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_menu_item_sizes","roles":"anon, authenticated","table":"menu_item_sizes","schema":"public","applies_to":"s","using_expression":"((is_active = true) AND (EXISTS ( SELECT 1\n   FROM menu_items mi\n  WHERE ((mi.id = menu_item_sizes.menu_item_id) AND (mi.is_active = true)))) AND (EXISTS ( SELECT 1\n   FROM sizes s\n  WHERE ((s.id = menu_item_sizes.size_id) AND (s.is_active = true)))))","with_check_expression":null},{"name":"admin_write_menu_items","roles":"authenticated","table":"menu_items","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_menu_items","roles":"anon, authenticated","table":"menu_items","schema":"public","applies_to":"s","using_expression":"((is_active = true) AND (EXISTS ( SELECT 1\n   FROM categories c\n  WHERE ((c.id = menu_items.category_id) AND (c.is_active = true)))))","with_check_expression":null},{"name":"admin_write_sizes","roles":"authenticated","table":"sizes","schema":"public","applies_to":"*","using_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)","with_check_expression":"(((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text)"},{"name":"public_read_active_sizes","roles":"anon, authenticated","table":"sizes","schema":"public","applies_to":"s","using_expression":"(is_active = true)","with_check_expression":null},{"name":"Admin can delete menu images","roles":"-","table":"objects","schema":"storage","applies_to":"d","using_expression":"((bucket_id = 'menu-images'::text) AND (auth.uid() IS NOT NULL))","with_check_expression":null},{"name":"Admin can update menu images","roles":"-","table":"objects","schema":"storage","applies_to":"u","using_expression":"((bucket_id = 'menu-images'::text) AND (auth.uid() IS NOT NULL))","with_check_expression":null},{"name":"Admin can upload menu images","roles":"-","table":"objects","schema":"storage","applies_to":"i","using_expression":null,"with_check_expression":"((bucket_id = 'menu-images'::text) AND (auth.uid() IS NOT NULL))"},{"name":"Admins can delete images","roles":"authenticated","table":"objects","schema":"storage","applies_to":"d","using_expression":"((bucket_id = 'product-images'::text) AND (((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text))","with_check_expression":null},{"name":"Admins can update images","roles":"authenticated","table":"objects","schema":"storage","applies_to":"u","using_expression":"((bucket_id = 'product-images'::text) AND (((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text))","with_check_expression":null},{"name":"Admins can write images","roles":"authenticated","table":"objects","schema":"storage","applies_to":"i","using_expression":null,"with_check_expression":"((bucket_id = 'product-images'::text) AND (((current_setting('request.jwt.claims'::text, true))::jsonb ->> 'email'::text) = 'theshiplapshopcoffeehouse@gmail.com'::text))"},{"name":"Public can read images","roles":"-","table":"objects","schema":"storage","applies_to":"s","using_expression":"(bucket_id = 'product-images'::text)","with_check_expression":null},{"name":"Public can view menu images","roles":"-","table":"objects","schema":"storage","applies_to":"s","using_expression":"(bucket_id = 'menu-images'::text)","with_check_expression":null}],"triggers":[{"name":"attributes_set_updated_at","event":"UPDATE","table":"attributes","schema":"public","action_timing":"BEFORE"},{"name":"categories_set_updated_at","event":"UPDATE","table":"categories","schema":"public","action_timing":"BEFORE"},{"name":"menu_item_attributes_set_updated_at","event":"UPDATE","table":"menu_item_attributes","schema":"public","action_timing":"BEFORE"},{"name":"menu_item_sizes_set_updated_at","event":"UPDATE","table":"menu_item_sizes","schema":"public","action_timing":"BEFORE"},{"name":"menu_items_set_updated_at","event":"UPDATE","table":"menu_items","schema":"public","action_timing":"BEFORE"},{"name":"sizes_set_updated_at","event":"UPDATE","table":"sizes","schema":"public","action_timing":"BEFORE"},{"name":"enforce_bucket_name_length_trigger","event":"UPDATE","table":"buckets","schema":"storage","action_timing":"BEFORE"},{"name":"enforce_bucket_name_length_trigger","event":"INSERT","table":"buckets","schema":"storage","action_timing":"BEFORE"},{"name":"objects_delete_delete_prefix","event":"DELETE","table":"objects","schema":"storage","action_timing":"AFTER"},{"name":"objects_insert_create_prefix","event":"INSERT","table":"objects","schema":"storage","action_timing":"BEFORE"},{"name":"objects_update_create_prefix","event":"UPDATE","table":"objects","schema":"storage","action_timing":"BEFORE"},{"name":"update_objects_updated_at","event":"UPDATE","table":"objects","schema":"storage","action_timing":"BEFORE"},{"name":"prefixes_create_hierarchy","event":"INSERT","table":"prefixes","schema":"storage","action_timing":"BEFORE"},{"name":"prefixes_delete_hierarchy","event":"DELETE","table":"prefixes","schema":"storage","action_timing":"AFTER"}],"functions":[{"args":"p_menu_item_id uuid, p_attribute_ids uuid[]","name":"assign_attributes_to_menu_item","schema":"public","returns":"void","definition":"CREATE OR REPLACE FUNCTION public.assign_attributes_to_menu_item(p_menu_item_id uuid, p_attribute_ids uuid[])\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    -- First, remove existing attributes for this menu item\r\n    DELETE FROM menu_item_attributes \r\n    WHERE menu_item_id = p_menu_item_id;\r\n    \r\n    -- Then, insert the new attributes\r\n    IF array_length(p_attribute_ids, 1) > 0 THEN\r\n        INSERT INTO menu_item_attributes (menu_item_id, attribute_id)\r\n        SELECT p_menu_item_id, unnest(p_attribute_ids);\r\n    END IF;\r\nEND;\r\n$function$\n"},{"args":"attribute_type text","name":"get_attributes_by_type","schema":"public","returns":"TABLE(id uuid, name character varying, type character varying, description text, price_adjustment numeric, color character varying, is_active boolean, display_order integer, created_at timestamp with time zone, updated_at timestamp with time zone)","definition":"CREATE OR REPLACE FUNCTION public.get_attributes_by_type(attribute_type text DEFAULT NULL::text)\n RETURNS TABLE(id uuid, name character varying, type character varying, description text, price_adjustment numeric, color character varying, is_active boolean, display_order integer, created_at timestamp with time zone, updated_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    IF attribute_type IS NULL THEN\r\n        RETURN QUERY\r\n        SELECT a.id, a.name, a.type, a.description, a.price_adjustment, \r\n               a.color, a.is_active, a.display_order, a.created_at, a.updated_at\r\n        FROM attributes a\r\n        WHERE a.is_active = true\r\n        ORDER BY a.type, a.display_order;\r\n    ELSE\r\n        RETURN QUERY\r\n        SELECT a.id, a.name, a.type, a.description, a.price_adjustment, \r\n               a.color, a.is_active, a.display_order, a.created_at, a.updated_at\r\n        FROM attributes a\r\n        WHERE a.type = attribute_type AND a.is_active = true\r\n        ORDER BY a.display_order;\r\n    END IF;\r\nEND;\r\n$function$\n"},{"args":"","name":"get_menu_with_attributes","schema":"public","returns":"TABLE(id uuid, name character varying, description text, price numeric, category_id uuid, tags text[], image_url text, is_active boolean, display_order integer, created_at timestamp with time zone, updated_at timestamp with time zone, category_name character varying, sizes json, menu_tags json)","definition":"CREATE OR REPLACE FUNCTION public.get_menu_with_attributes()\n RETURNS TABLE(id uuid, name character varying, description text, price numeric, category_id uuid, tags text[], image_url text, is_active boolean, display_order integer, created_at timestamp with time zone, updated_at timestamp with time zone, category_name character varying, sizes json, menu_tags json)\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    RETURN QUERY\r\n    SELECT \r\n        mi.id,\r\n        mi.name,\r\n        mi.description,\r\n        mi.price,\r\n        mi.category_id,\r\n        mi.tags,\r\n        mi.image_url,\r\n        mi.is_active,\r\n        mi.display_order,\r\n        mi.created_at,\r\n        mi.updated_at,\r\n        c.name AS category_name,\r\n        COALESCE(\r\n            (SELECT json_agg(\r\n                json_build_object(\r\n                    'id', a.id,\r\n                    'name', a.name,\r\n                    'price_adjustment', a.price_adjustment\r\n                ) ORDER BY a.display_order\r\n            )\r\n            FROM menu_item_attributes mia\r\n            JOIN attributes a ON mia.attribute_id = a.id\r\n            WHERE mia.menu_item_id = mi.id \r\n                AND a.type = 'size' \r\n                AND a.is_active = true),\r\n            '[]'::json\r\n        ) AS sizes,\r\n        COALESCE(\r\n            (SELECT json_agg(\r\n                json_build_object(\r\n                    'id', a.id,\r\n                    'name', a.name,\r\n                    'color', a.color,\r\n                    'description', a.description\r\n                ) ORDER BY a.display_order\r\n            )\r\n            FROM menu_item_attributes mia\r\n            JOIN attributes a ON mia.attribute_id = a.id\r\n            WHERE mia.menu_item_id = mi.id \r\n                AND a.type = 'tag' \r\n                AND a.is_active = true),\r\n            '[]'::json\r\n        ) AS menu_tags\r\n    FROM menu_items mi\r\n    JOIN categories c ON mi.category_id = c.id\r\n    WHERE mi.is_active = true AND c.is_active = true\r\n    ORDER BY c.display_order, mi.display_order;\r\nEND;\r\n$function$\n"},{"args":"","name":"set_updated_at","schema":"public","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION public.set_updated_at()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nbegin\r\n  new.updated_at = now();\r\n  return new;\r\nend $function$\n"},{"args":"","name":"update_updated_at_column","schema":"public","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION public.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\r\nBEGIN\r\n    NEW.updated_at = NOW();\r\n    RETURN NEW;\r\nEND;\r\n$function$\n"},{"args":"_bucket_id text, _name text","name":"add_prefixes","schema":"storage","returns":"void","definition":"CREATE OR REPLACE FUNCTION storage.add_prefixes(_bucket_id text, _name text)\n RETURNS void\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nDECLARE\n    prefixes text[];\nBEGIN\n    prefixes := \"storage\".\"get_prefixes\"(\"_name\");\n\n    IF array_length(prefixes, 1) > 0 THEN\n        INSERT INTO storage.prefixes (name, bucket_id)\n        SELECT UNNEST(prefixes) as name, \"_bucket_id\" ON CONFLICT DO NOTHING;\n    END IF;\nEND;\n$function$\n"},{"args":"bucketid text, name text, owner uuid, metadata jsonb","name":"can_insert_object","schema":"storage","returns":"void","definition":"CREATE OR REPLACE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb)\n RETURNS void\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n  INSERT INTO \"storage\".\"objects\" (\"bucket_id\", \"name\", \"owner\", \"metadata\") VALUES (bucketid, name, owner, metadata);\n  -- hack to rollback the successful insert\n  RAISE sqlstate 'PT200' using\n  message = 'ROLLBACK',\n  detail = 'rollback successful insert';\nEND\n$function$\n"},{"args":"_bucket_id text, _name text","name":"delete_prefix","schema":"storage","returns":"boolean","definition":"CREATE OR REPLACE FUNCTION storage.delete_prefix(_bucket_id text, _name text)\n RETURNS boolean\n LANGUAGE plpgsql\n SECURITY DEFINER\nAS $function$\nBEGIN\n    -- Check if we can delete the prefix\n    IF EXISTS(\n        SELECT FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"prefixes\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    )\n    OR EXISTS(\n        SELECT FROM \"storage\".\"objects\"\n        WHERE \"objects\".\"bucket_id\" = \"_bucket_id\"\n          AND \"storage\".\"get_level\"(\"objects\".\"name\") = \"storage\".\"get_level\"(\"_name\") + 1\n          AND \"objects\".\"name\" COLLATE \"C\" LIKE \"_name\" || '/%'\n        LIMIT 1\n    ) THEN\n    -- There are sub-objects, skip deletion\n    RETURN false;\n    ELSE\n        DELETE FROM \"storage\".\"prefixes\"\n        WHERE \"prefixes\".\"bucket_id\" = \"_bucket_id\"\n          AND level = \"storage\".\"get_level\"(\"_name\")\n          AND \"prefixes\".\"name\" = \"_name\";\n        RETURN true;\n    END IF;\nEND;\n$function$\n"},{"args":"","name":"delete_prefix_hierarchy_trigger","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.delete_prefix_hierarchy_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    prefix text;\nBEGIN\n    prefix := \"storage\".\"get_prefix\"(OLD.\"name\");\n\n    IF coalesce(prefix, '') != '' THEN\n        PERFORM \"storage\".\"delete_prefix\"(OLD.\"bucket_id\", prefix);\n    END IF;\n\n    RETURN OLD;\nEND;\n$function$\n"},{"args":"","name":"enforce_bucket_name_length","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.enforce_bucket_name_length()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nbegin\n    if length(new.name) > 100 then\n        raise exception 'bucket name \"%\" is too long (% characters). Max is 100.', new.name, length(new.name);\n    end if;\n    return new;\nend;\n$function$\n"},{"args":"name text","name":"extension","schema":"storage","returns":"text","definition":"CREATE OR REPLACE FUNCTION storage.extension(name text)\n RETURNS text\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\n    _filename text;\nBEGIN\n    SELECT string_to_array(name, '/') INTO _parts;\n    SELECT _parts[array_length(_parts,1)] INTO _filename;\n    RETURN reverse(split_part(reverse(_filename), '.', 1));\nEND\n$function$\n"},{"args":"name text","name":"filename","schema":"storage","returns":"text","definition":"CREATE OR REPLACE FUNCTION storage.filename(name text)\n RETURNS text\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n_parts text[];\nBEGIN\n\tselect string_to_array(name, '/') into _parts;\n\treturn _parts[array_length(_parts,1)];\nEND\n$function$\n"},{"args":"name text","name":"foldername","schema":"storage","returns":"text[]","definition":"CREATE OR REPLACE FUNCTION storage.foldername(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE\nAS $function$\nDECLARE\n    _parts text[];\nBEGIN\n    -- Split on \"/\" to get path segments\n    SELECT string_to_array(name, '/') INTO _parts;\n    -- Return everything except the last segment\n    RETURN _parts[1 : array_length(_parts,1) - 1];\nEND\n$function$\n"},{"args":"name text","name":"get_level","schema":"storage","returns":"integer","definition":"CREATE OR REPLACE FUNCTION storage.get_level(name text)\n RETURNS integer\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT array_length(string_to_array(\"name\", '/'), 1);\n$function$\n"},{"args":"name text","name":"get_prefix","schema":"storage","returns":"text","definition":"CREATE OR REPLACE FUNCTION storage.get_prefix(name text)\n RETURNS text\n LANGUAGE sql\n IMMUTABLE STRICT\nAS $function$\nSELECT\n    CASE WHEN strpos(\"name\", '/') > 0 THEN\n             regexp_replace(\"name\", '[\\/]{1}[^\\/]+\\/?$', '')\n         ELSE\n             ''\n        END;\n$function$\n"},{"args":"name text","name":"get_prefixes","schema":"storage","returns":"text[]","definition":"CREATE OR REPLACE FUNCTION storage.get_prefixes(name text)\n RETURNS text[]\n LANGUAGE plpgsql\n IMMUTABLE STRICT\nAS $function$\nDECLARE\n    parts text[];\n    prefixes text[];\n    prefix text;\nBEGIN\n    -- Split the name into parts by '/'\n    parts := string_to_array(\"name\", '/');\n    prefixes := '{}';\n\n    -- Construct the prefixes, stopping one level below the last part\n    FOR i IN 1..array_length(parts, 1) - 1 LOOP\n            prefix := array_to_string(parts[1:i], '/');\n            prefixes := array_append(prefixes, prefix);\n    END LOOP;\n\n    RETURN prefixes;\nEND;\n$function$\n"},{"args":"","name":"get_size_by_bucket","schema":"storage","returns":"TABLE(size bigint, bucket_id text)","definition":"CREATE OR REPLACE FUNCTION storage.get_size_by_bucket()\n RETURNS TABLE(size bigint, bucket_id text)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    return query\n        select sum((metadata->>'size')::bigint) as size, obj.bucket_id\n        from \"storage\".objects as obj\n        group by obj.bucket_id;\nEND\n$function$\n"},{"args":"bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text","name":"list_multipart_uploads_with_delimiter","schema":"storage","returns":"TABLE(key text, id text, created_at timestamp with time zone)","definition":"CREATE OR REPLACE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text)\n RETURNS TABLE(key text, id text, created_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(key COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))\n                    ELSE\n                        key\n                END AS key, id, created_at\n            FROM\n                storage.s3_multipart_uploads\n            WHERE\n                bucket_id = $5 AND\n                key ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $4 != '''' AND $6 = '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN\n                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                key COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END AND\n                CASE\n                    WHEN $6 != '''' THEN\n                        id COLLATE \"C\" > $6\n                    ELSE\n                        true\n                    END\n            ORDER BY\n                key COLLATE \"C\" ASC, created_at ASC) as e order by key COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;\nEND;\n$function$\n"},{"args":"bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text","name":"list_objects_with_delimiter","schema":"storage","returns":"TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)","definition":"CREATE OR REPLACE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text)\n RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    RETURN QUERY EXECUTE\n        'SELECT DISTINCT ON(name COLLATE \"C\") * from (\n            SELECT\n                CASE\n                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))\n                    ELSE\n                        name\n                END AS name, id, metadata, updated_at\n            FROM\n                storage.objects\n            WHERE\n                bucket_id = $5 AND\n                name ILIKE $1 || ''%'' AND\n                CASE\n                    WHEN $6 != '''' THEN\n                    name COLLATE \"C\" > $6\n                ELSE true END\n                AND CASE\n                    WHEN $4 != '''' THEN\n                        CASE\n                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN\n                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE \"C\" > $4\n                            ELSE\n                                name COLLATE \"C\" > $4\n                            END\n                    ELSE\n                        true\n                END\n            ORDER BY\n                name COLLATE \"C\" ASC) as e order by name COLLATE \"C\" LIMIT $3'\n        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;\nEND;\n$function$\n"},{"args":"","name":"objects_insert_prefix_trigger","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.objects_insert_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    NEW.level := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n"},{"args":"","name":"objects_update_prefix_trigger","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.objects_update_prefix_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n    old_prefixes TEXT[];\nBEGIN\n    -- Ensure this is an update operation and the name has changed\n    IF TG_OP = 'UPDATE' AND (NEW.\"name\" <> OLD.\"name\" OR NEW.\"bucket_id\" <> OLD.\"bucket_id\") THEN\n        -- Retrieve old prefixes\n        old_prefixes := \"storage\".\"get_prefixes\"(OLD.\"name\");\n\n        -- Remove old prefixes that are only used by this object\n        WITH all_prefixes as (\n            SELECT unnest(old_prefixes) as prefix\n        ),\n        can_delete_prefixes as (\n             SELECT prefix\n             FROM all_prefixes\n             WHERE NOT EXISTS (\n                 SELECT 1 FROM \"storage\".\"objects\"\n                 WHERE \"bucket_id\" = OLD.\"bucket_id\"\n                   AND \"name\" <> OLD.\"name\"\n                   AND \"name\" LIKE (prefix || '%')\n             )\n         )\n        DELETE FROM \"storage\".\"prefixes\" WHERE name IN (SELECT prefix FROM can_delete_prefixes);\n\n        -- Add new prefixes\n        PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    END IF;\n    -- Set the new level\n    NEW.\"level\" := \"storage\".\"get_level\"(NEW.\"name\");\n\n    RETURN NEW;\nEND;\n$function$\n"},{"args":"","name":"operation","schema":"storage","returns":"text","definition":"CREATE OR REPLACE FUNCTION storage.operation()\n RETURNS text\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    RETURN current_setting('storage.operation', true);\nEND;\n$function$\n"},{"args":"","name":"prefixes_insert_trigger","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.prefixes_insert_trigger()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    PERFORM \"storage\".\"add_prefixes\"(NEW.\"bucket_id\", NEW.\"name\");\n    RETURN NEW;\nEND;\n$function$\n"},{"args":"prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text","name":"search","schema":"storage","returns":"TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)","definition":"CREATE OR REPLACE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\nAS $function$\ndeclare\n    can_bypass_rls BOOLEAN;\nbegin\n    SELECT rolbypassrls\n    INTO can_bypass_rls\n    FROM pg_roles\n    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);\n\n    IF can_bypass_rls THEN\n        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    ELSE\n        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);\n    END IF;\nend;\n$function$\n"},{"args":"prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text","name":"search_legacy_v1","schema":"storage","returns":"TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)","definition":"CREATE OR REPLACE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select path_tokens[$1] as folder\n           from storage.objects\n             where objects.name ilike $2 || $3 || ''%''\n               and bucket_id = $4\n               and array_length(objects.path_tokens, 1) <> $1\n           group by folder\n           order by folder ' || v_sort_order || '\n     )\n     (select folder as \"name\",\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[$1] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where objects.name ilike $2 || $3 || ''%''\n       and bucket_id = $4\n       and array_length(objects.path_tokens, 1) = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n"},{"args":"prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text","name":"search_v1_optimised","schema":"storage","returns":"TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)","definition":"CREATE OR REPLACE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text)\n RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\ndeclare\n    v_order_by text;\n    v_sort_order text;\nbegin\n    case\n        when sortcolumn = 'name' then\n            v_order_by = 'name';\n        when sortcolumn = 'updated_at' then\n            v_order_by = 'updated_at';\n        when sortcolumn = 'created_at' then\n            v_order_by = 'created_at';\n        when sortcolumn = 'last_accessed_at' then\n            v_order_by = 'last_accessed_at';\n        else\n            v_order_by = 'name';\n        end case;\n\n    case\n        when sortorder = 'asc' then\n            v_sort_order = 'asc';\n        when sortorder = 'desc' then\n            v_sort_order = 'desc';\n        else\n            v_sort_order = 'asc';\n        end case;\n\n    v_order_by = v_order_by || ' ' || v_sort_order;\n\n    return query execute\n        'with folders as (\n           select (string_to_array(name, ''/''))[level] as name\n           from storage.prefixes\n             where lower(prefixes.name) like lower($2 || $3) || ''%''\n               and bucket_id = $4\n               and level = $1\n           order by name ' || v_sort_order || '\n     )\n     (select name,\n            null as id,\n            null as updated_at,\n            null as created_at,\n            null as last_accessed_at,\n            null as metadata from folders)\n     union all\n     (select path_tokens[level] as \"name\",\n            id,\n            updated_at,\n            created_at,\n            last_accessed_at,\n            metadata\n     from storage.objects\n     where lower(objects.name) like lower($2 || $3) || ''%''\n       and bucket_id = $4\n       and level = $1\n     order by ' || v_order_by || ')\n     limit $5\n     offset $6' using levels, prefix, search, bucketname, limits, offsets;\nend;\n$function$\n"},{"args":"prefix text, bucket_name text, limits integer, levels integer, start_after text","name":"search_v2","schema":"storage","returns":"TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)","definition":"CREATE OR REPLACE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text)\n RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)\n LANGUAGE plpgsql\n STABLE\nAS $function$\nBEGIN\n    RETURN query EXECUTE\n        $sql$\n        SELECT * FROM (\n            (\n                SELECT\n                    split_part(name, '/', $4) AS key,\n                    name || '/' AS name,\n                    NULL::uuid AS id,\n                    NULL::timestamptz AS updated_at,\n                    NULL::timestamptz AS created_at,\n                    NULL::jsonb AS metadata\n                FROM storage.prefixes\n                WHERE name COLLATE \"C\" LIKE $1 || '%'\n                AND bucket_id = $2\n                AND level = $4\n                AND name COLLATE \"C\" > $5\n                ORDER BY prefixes.name COLLATE \"C\" LIMIT $3\n            )\n            UNION ALL\n            (SELECT split_part(name, '/', $4) AS key,\n                name,\n                id,\n                updated_at,\n                created_at,\n                metadata\n            FROM storage.objects\n            WHERE name COLLATE \"C\" LIKE $1 || '%'\n                AND bucket_id = $2\n                AND level = $4\n                AND name COLLATE \"C\" > $5\n            ORDER BY name COLLATE \"C\" LIMIT $3)\n        ) obj\n        ORDER BY name COLLATE \"C\" LIMIT $3;\n        $sql$\n        USING prefix, bucket_name, limits, levels, start_after;\nEND;\n$function$\n"},{"args":"","name":"update_updated_at_column","schema":"storage","returns":"trigger","definition":"CREATE OR REPLACE FUNCTION storage.update_updated_at_column()\n RETURNS trigger\n LANGUAGE plpgsql\nAS $function$\nBEGIN\n    NEW.updated_at = now();\n    RETURN NEW; \nEND;\n$function$\n"}],"sequences":[],"extensions":[{"name":"pg_graphql","schema":"graphql","version":"1.5.11"},{"name":"pg_stat_statements","schema":"extensions","version":"1.11"},{"name":"pgcrypto","schema":"extensions","version":"1.3"},{"name":"plpgsql","schema":"pg_catalog","version":"1.0"},{"name":"supabase_vault","schema":"vault","version":"0.3.1"},{"name":"uuid-ossp","schema":"extensions","version":"1.1"}],"rls_tables":[{"table":"attributes","schema":"public","rls_enabled":true},{"table":"categories","schema":"public","rls_enabled":true},{"table":"menu_item_attributes","schema":"public","rls_enabled":true},{"table":"menu_item_sizes","schema":"public","rls_enabled":true},{"table":"menu_items","schema":"public","rls_enabled":true},{"table":"sizes","schema":"public","rls_enabled":true},{"table":"buckets","schema":"storage","rls_enabled":true},{"table":"buckets_analytics","schema":"storage","rls_enabled":true},{"table":"migrations","schema":"storage","rls_enabled":true},{"table":"objects","schema":"storage","rls_enabled":true},{"table":"prefixes","schema":"storage","rls_enabled":true},{"table":"s3_multipart_uploads","schema":"storage","rls_enabled":true},{"table":"s3_multipart_uploads_parts","schema":"storage","rls_enabled":true}],"row_counts":[{"table":"attributes","schema":"public","approx_rows":7},{"table":"categories","schema":"public","approx_rows":5},{"table":"menu_item_attributes","schema":"public","approx_rows":0},{"table":"menu_item_sizes","schema":"public","approx_rows":0},{"table":"menu_items","schema":"public","approx_rows":26},{"table":"sizes","schema":"public","approx_rows":4},{"table":"buckets","schema":"storage","approx_rows":2},{"table":"buckets_analytics","schema":"storage","approx_rows":0},{"table":"migrations","schema":"storage","approx_rows":39},{"table":"objects","schema":"storage","approx_rows":1},{"table":"prefixes","schema":"storage","approx_rows":1},{"table":"s3_multipart_uploads","schema":"storage","approx_rows":0},{"table":"s3_multipart_uploads_parts","schema":"storage","approx_rows":0}],"foreign_keys":[{"table":"menu_item_attributes","schema":"public","ref_table":"attributes","fk_columns":"attribute_id","ref_schema":"public","delete_rule":"CASCADE","ref_columns":"id","update_rule":"NO ACTION","constraint_name":"menu_item_attributes_attribute_id_fkey"},{"table":"menu_item_attributes","schema":"public","ref_table":"menu_items","fk_columns":"menu_item_id","ref_schema":"public","delete_rule":"CASCADE","ref_columns":"id","update_rule":"NO ACTION","constraint_name":"menu_item_attributes_menu_item_id_fkey"},{"table":"menu_item_sizes","schema":"public","ref_table":"menu_items","fk_columns":"menu_item_id","ref_schema":"public","delete_rule":"CASCADE","ref_columns":"id","update_rule":"NO ACTION","constraint_name":"menu_item_sizes_menu_item_id_fkey"},{"table":"menu_item_sizes","schema":"public","ref_table":"sizes","fk_columns":"size_id","ref_schema":"public","delete_rule":"CASCADE","ref_columns":"id","update_rule":"NO ACTION","constraint_name":"menu_item_sizes_size_id_fkey"},{"table":"menu_items","schema":"public","ref_table":"categories","fk_columns":"category_id","ref_schema":"public","delete_rule":"CASCADE","ref_columns":"id","update_rule":"NO ACTION","constraint_name":"menu_items_category_id_fkey"}],"generated_at":"2025-08-29T01:06:50.862179+00:00","primary_unique":[{"table":"attributes","schema":"public","columns":"id","constraint_name":"attributes_pkey","constraint_type":"PRIMARY KEY"},{"table":"categories","schema":"public","columns":"id","constraint_name":"categories_pkey","constraint_type":"PRIMARY KEY"},{"table":"menu_item_attributes","schema":"public","columns":"menu_item_id, attribute_id","constraint_name":"menu_item_attributes_menu_item_id_attribute_id_key","constraint_type":"UNIQUE"},{"table":"menu_item_attributes","schema":"public","columns":"id","constraint_name":"menu_item_attributes_pkey","constraint_type":"PRIMARY KEY"},{"table":"menu_item_sizes","schema":"public","columns":"menu_item_id, size_id","constraint_name":"menu_item_sizes_menu_item_id_size_id_key","constraint_type":"UNIQUE"},{"table":"menu_item_sizes","schema":"public","columns":"id","constraint_name":"menu_item_sizes_pkey","constraint_type":"PRIMARY KEY"},{"table":"menu_items","schema":"public","columns":"id","constraint_name":"menu_items_pkey","constraint_type":"PRIMARY KEY"},{"table":"sizes","schema":"public","columns":"id","constraint_name":"sizes_pkey","constraint_type":"PRIMARY KEY"},{"table":"buckets","schema":"storage","columns":"id","constraint_name":"buckets_pkey","constraint_type":"PRIMARY KEY"},{"table":"buckets_analytics","schema":"storage","columns":"id","constraint_name":"buckets_analytics_pkey","constraint_type":"PRIMARY KEY"},{"table":"objects","schema":"storage","columns":"id","constraint_name":"objects_pkey","constraint_type":"PRIMARY KEY"},{"table":"prefixes","schema":"storage","columns":"bucket_id, level, name","constraint_name":"prefixes_pkey","constraint_type":"PRIMARY KEY"},{"table":"s3_multipart_uploads","schema":"storage","columns":"id","constraint_name":"s3_multipart_uploads_pkey","constraint_type":"PRIMARY KEY"},{"table":"s3_multipart_uploads_parts","schema":"storage","columns":"id","constraint_name":"s3_multipart_uploads_parts_pkey","constraint_type":"PRIMARY KEY"}]}